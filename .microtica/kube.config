---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "pvc-{{MIC_NAME}}"
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-managed # A predefined storage class that was provisioned with the Microtica EKS template
  resources:
    requests:
      storage: 10Gi # irrelevant param for EFS, but must be provided
---
# MariaDB

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-mariadb"
  labels:
    app: "{{MIC_NAME}}-mariadb"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-mariadb"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-mariadb"
    spec:
      containers:
        - name: "appwrite-mariadb"
          image: mariadb:10.7
          securityContext:
            runAsUser: 50000
            runAsGroup: 50000
          args:
            - mysqld
            - --innodb-flush-method=fsync
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: MYSQL_ROOT_PASSWORD
              value: "appwrite"
            - name: MYSQL_DATABASE
              value: "appwrite"
            - name: MYSQL_USER
              value: "user"
            - name: MYSQL_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              subPath: mysql
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-mariadb"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-mariadb"
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-mariadb"
---
# Redis

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-redis"
  labels:
    app: "{{MIC_NAME}}-redis"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-redis"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-redis"
    spec:
      containers:
        - name: "appwrite-redis"
          image: redis:6.0
          securityContext:
            runAsUser: 50000
            runAsGroup: 50000
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /data
              subPath: redis
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-redis"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-redis"
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-redis"
---
# InfluxDB

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-influxdb"
  labels:
    app: "{{MIC_NAME}}-influxdb"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-influxdb"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-influxdb"
    spec:
      containers:
        - name: "appwrite-influxdb"
          image: influxdb:1.8-alpine
          securityContext:
            runAsUser: 50000
            runAsGroup: 50000
          ports:
            - containerPort: 8086
          volumeMounts:
            - mountPath: /var/lib/influxdb
              subPath: influxdb
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-influxdb"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-influxdb"
spec:
  ports:
    - name: "8086"
      port: 8086
      targetPort: 8086
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-influxdb"
---
# Appwrite

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-appwrite"
  labels:
    app: "{{MIC_NAME}}-appwrite"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-appwrite"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-appwrite"
    spec:
      containers:
        - name: "appwrite-appwrite"
          image: appwrite/appwrite:1.4.7
          securityContext:
            allowPrivilegeEscalation: false # TODO: Not recommanded
            runAsUser: 0 # TODO: Not recommanded
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_INFLUXDB_HOST
              value: "{{MIC_NAME}}-influxdb"
            - name: _APP_INFLUXDB_PORT
              value: "8086"
            - name: _APP_STATSD_HOST
              value: "{{MIC_NAME}}-telegraf"
            - name: _APP_STATSD_PORT
              value: "8125"
            - name: _APP_SYSTEM_EMAIL_ADDRESS
              value: "" # TODO: insert your smtp noreply email address here
            - name: _APP_SMTP_HOST
              value: "smtp.sendgrid.net" # TODO: change this if you aren't using sendgrid
            - name: _APP_SMTP_PORT
              value: "25"
            - name: _APP_SMTP_SECURE
              value: "tls"
            - name: _APP_SMTP_USERNAME
              value: "apikey" # TODO: change this if you aren't using sendgrid
            - name: _APP_SMTP_PASSWORD
              value: ""
            - name: _APP_EXECUTOR_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_HOST
              value: "http://{{MIC_NAME}}-executor-proxy/v1"
            - name: _APP_STORAGE_ANTIVIRUS
              value: "disabled"
            - name: _APP_FUNCTIONS_RUNTIMES
              value: node-18.0,php-8.1,python-3.10,ruby-3.1,deno-1.24,java-18.0,dart-2.17
            - name: _APP_USAGE_STATS
              value: enabled
            - name: _APP_DOMAIN
              value: "{{MIC_DOMAIN_NAME}}"
            - name: _APP_DOMAIN_TARGET
              value: "{{MIC_DOMAIN_NAME}}"
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /storage/uploads
              subPath: appwrite-uploads
              name: data
            - mountPath: /storage/cache
              subPath: appwrite-cache
              name: data
            - mountPath: /storage/config
              subPath: appwrite-config
              name: data
            - mountPath: /storage/certificates
              subPath: appwrite-certificates
              name: data
            - mountPath: /storage/functions
              subPath: appwrite-functions
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-appwrite"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-appwrite"
spec:
  ports:
    - name: "9501"
      port: 9501
      targetPort: 80
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-appwrite"
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: "{{MIC_DOMAIN_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
  labels:
    microticaService: "{{MIC_NAME}}"
spec:
  secretName: "{{MIC_DOMAIN_TLS}}"
  dnsNames:
  - "{{MIC_DOMAIN_NAME}}"
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{MIC_NAME}}-appwrite"
  namespace: "{{MIC_NAMESPACE}}"
spec:
  ingressClassName: nginx
  rules:
    - host: "{{MIC_DOMAIN_NAME}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{MIC_NAME}}-appwrite"
                port:
                  number: 80
  tls:
    - hosts:
        - "{{MIC_DOMAIN_NAME}}"
      secretName: "{{MIC_DOMAIN_TLS}}"
---
# Appwrite Worker Functions

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-functions"
  labels:
    app: "{{MIC_NAME}}-worker-functions"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-functions"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-functions"
    spec:
      containers:
        - name: "appwrite-worker-functions"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-functions
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: {{MIC_NAME}}-redis
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_SECRET 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_HOST
              value: "http://{{MIC_NAME}}-executor-proxy/v1"
            - name: _APP_USAGE_STATS
              value: enabled
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Worker Audits

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-audits"
  labels:
    app: "{{MIC_NAME}}-worker-audits"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-audits"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-audits"
    spec:
      containers:
        - name: "appwrite-worker-audits"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-audits
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Worker Certificates

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-certificates"
  labels:
    app: "{{MIC_NAME}}-worker-certificates"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-certificates"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-certificates"
    spec:
      containers:
        - name: "appwrite-worker-certificates"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-certificates
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_DOMAIN
              value: "{{MIC_DOMAIN_NAME}}"
            - name: _APP_DOMAIN_TARGET
              value: "{{MIC_DOMAIN_NAME}}"
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Worker Deletes

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-deletes"
  labels:
    app: "{{MIC_NAME}}-worker-deletes"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-deletes"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-deletes"
    spec:
      containers:
        - name: "appwrite-worker-deletes"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-deletes
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_SECRET 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_HOST
              value: "http://{{MIC_NAME}}-executor-proxy/v1"
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
          volumeMounts:
            - mountPath: /storage/uploads
              subPath: appwrite-uploads
              name: data
            - mountPath: /storage/cache
              subPath: appwrite-cache
              name: data
            - mountPath: /storage/builds
              subPath: appwrite-builds
              name: data
            - mountPath: /storage/certificates
              subPath: appwrite-certificates
              name: data
            - mountPath: /storage/functions
              subPath: appwrite-functions
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
---
# Appwrite Worker Mails

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-mails"
  labels:
    app: "{{MIC_NAME}}-worker-mails"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-mails"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-mails"
    spec:
      containers:
        - name: "appwrite-worker-mails"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-mails
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Worker Schedule

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-schedule"
  labels:
    app: "{{MIC_NAME}}-worker-schedule"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-schedule"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-schedule"
    spec:
      containers:
        - name: "appwrite-worker-schedule"
          image: appwrite/appwrite:1.4.7
          command:
            - schedule
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Usage

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-usage"
  labels:
    app: "{{MIC_NAME}}-usage"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-usage"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-usage"
    spec:
      containers:
        - name: "appwrite-usage"
          image: appwrite/appwrite:1.4.7
          command:
            - usage
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_INFLUXDB_HOST
              value: "{{MIC_NAME}}-influxdb"
            - name: _APP_INFLUXDB_PORT
              value: "8086"
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Webhooks

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-webhooks"
  labels:
    app: "{{MIC_NAME}}-worker-webhooks"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-webhooks"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-webhooks"
    spec:
      containers:
        - name: "appwrite-worker-webhooks"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-webhooks
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Executor

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-executor"
  labels:
    app: "{{MIC_NAME}}-executor"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-executor"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-executor"
    spec:
      containers:
        - name: "appwrite-executor"
          image: openruntimes/executor:0.4.5
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: OPR_EXECUTOR_ENV
              value: production
            - name: OPR_EXECUTOR_SECRET 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: DOCKER_HOST
              value: tcp://localhost:2375
            - name: OPR_EXECUTOR_RUNTIMES
              value: node-18.0,php-8.1,python-3.10,ruby-3.1,deno-1.24,java-18.0,dart-2.17
            - name: OPR_EXECUTOR_NETWORK
          volumeMounts:
            - name: data
              mountPath: /storage/builds
              subPath: appwrite-builds
            - name: data
              mountPath: /storage/functions
              subPath: appwrite-functions
            - name: data
              mountPath: /tmp
              subPath: appwrite-executor-temp
            - name: data
              mountPath: /.docker
              subPath: docker-creds
            - name: hosts
              mountPath: /etc/hosts

        - name: docker-runner
          image: docker:18.01.0-dind
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-graph-storage
              mountPath: /var/lib/docker
            - name: data
              mountPath: /root/.docker
              subPath: docker-creds
            - name: data
              mountPath: /tmp
              subPath: appwrite-executor-temp
            - name: hosts
              mountPath: /etc/hosts

        - name: dns-resolver
          image: docker:18.01.0-dind
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: DOCKER_HOST
              value: tcp://localhost:2375
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/bash

              # Function to add the host entry to the hosts file
              function add_host_entry() {
                # Get the container ID and name
                CONTAINER_ID=$1;
                CONTAINER_NAME=$(docker inspect --format='{{.Config.Hostname}}' $CONTAINER_ID);

                # Get the container IP address
                CONTAINER_IP=$(docker inspect --format='{{.NetworkSettings.IPAddress}}' $CONTAINER_ID);

                remove_host_entry $CONTAINER_ID;
                
                echo "$CONTAINER_IP $CONTAINER_NAME" >> /etc/hosts;
                echo "Added new host entry: $CONTAINER_IP $CONTAINER_NAME";
              }

              # Function to remove the host entry from the hosts file
              function remove_host_entry() {
                # Get the container ID and name
                CONTAINER_ID=$1;
                CONTAINER_NAME=$(docker inspect --format='{{.Config.Hostname}}' $CONTAINER_ID);

                # Remove the host entry from the hosts file
                cp /etc/hosts /etc/hosts.temp;
                sed -i "/$CONTAINER_NAME/d" /etc/hosts.temp;
                cat /etc/hosts.temp > /etc/hosts;
                rm /etc/hosts.temp;

                echo "Removed host entry: $CONTAINER_NAME";
              }

              echo "Waiting for Docker events"
              # Listen for Docker container create and remove events
              docker events --filter type=container --filter event=create --filter event=delete | while read -r event_line; do
                # Extract the timestamp, action, and container ID from the event line
                event_timestamp=$(echo $event_line | awk '{print $1}')
                event_action=$(echo $event_line | awk '{print $3}')
                event_container=$(echo $event_line | awk '{print $4}')

                # Check if the event is a container create or remove event
                if [ "$event_action" == "create" ]; then
                  # Add the host entry for the container
                  add_host_entry $event_container;
                elif [ "$event_action" == "delete" ]; then
                  # Remove the host entry for the container
                  remove_host_entry $event_container;
                fi
              done
          securityContext:
            privileged: true
          volumeMounts:
            - name: hosts
              mountPath: /etc/hosts

      imagePullSecrets:
        - name: dockerhub
      volumes:
        - name: hosts
          hostPath:
            path: /etc/hosts
        - name: data
          persistentVolumeClaim:
            claimName: "pvc-{{MIC_NAME}}"
        - name: docker
          hostPath:
            path: /var/run/docker.sock
        - name: docker-graph-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-executor"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-executor"
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-executor"
---
# Appwrite Executor Proxy

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-executor-proxy"
  labels:
    app: "{{MIC_NAME}}-executor-proxy"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-executor-proxy"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-executor-proxy"
    spec:
      containers:
        - name: "appwrite-executor-proxy"
          image: openruntimes/proxy:0.3.1
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: OPR_PROXY_ENV
              value: production
            - name: OPR_PROXY_EXECUTORS
              value: "{{MIC_NAME}}-executor"
            - name: OPR_PROXY_HEALTHCHECK_INTERVAL
              value: "10000"
            - name: OPR_PROXY_WORKER_PER_CORE
              value: "6"
            - name: OPR_PROXY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: OPR_PROXY_EXECUTOR_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: OPR_PROXY_ALGORITHM
              value: "random"
            - name: OPR_PROXY_MAX_TIMEOUT
              value: "600"
            - name: OPR_PROXY_HEALTHCHECK
              value: "enabled"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-executor-proxy"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-executor-proxy"
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-executor-proxy"
---
# Appwrite Worker Builds

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-builds"
  labels:
    app: "{{MIC_NAME}}-worker-builds"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-builds"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-builds"
    spec:
      containers:
        - name: "appwrite-worker-builds"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-builds
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_EXECUTOR_HOST
              value: "http://{{MIC_NAME}}-executor-proxy/v1"
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Worker Databases

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-databases"
  labels:
    app: "{{MIC_NAME}}-worker-databases"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-databases"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-databases"
    spec:
      containers:
        - name: "appwrite-worker-databases"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-databases
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Worker Messaging

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-messaging"
  labels:
    app: "{{MIC_NAME}}-worker-messaging"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-messaging"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-messaging"
    spec:
      containers:
        - name: "appwrite-worker-messaging"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-messaging
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: {{MIC_NAME}}-redis
            - name: _APP_REDIS_PORT
              value: "6379"
---
# Appwrite Worker Migrations

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-worker-migrations"
  labels:
    app: "{{MIC_NAME}}-worker-migrations"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-worker-migrations"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-worker-migrations"
    spec:
      containers:
        - name: "appwrite-worker-migrations"
          image: appwrite/appwrite:1.4.7
          command:
            - worker-migrations
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
# Appwrite Maintenance

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-maintenance"
  labels:
    app: "{{MIC_NAME}}-maintenance"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-maintenance"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-maintenance"
    spec:
      containers:
        - name: "appwrite-maintenance"
          image: appwrite/appwrite:1.4.7
          command:
            - maintenance
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: {{MIC_NAME}}-redis
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_DOMAIN
              value: "{{MIC_DOMAIN_NAME}}"
            - name: _APP_DOMAIN_TARGET
              value: "{{MIC_DOMAIN_NAME}}"
---
# Appwrite Realtime

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-realtime"
  labels:
    app: "{{MIC_NAME}}-realtime"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-realtime"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-realtime"
    spec:
      containers:
        - name: "appwrite-realtime"
          image: appwrite/appwrite:1.4.7
          command:
            - realtime
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_ENV
              value: production
            - name: _APP_REDIS_HOST
              value: "{{MIC_NAME}}-redis"
            - name: _APP_REDIS_PORT
              value: "6379"
            - name: _APP_DB_HOST
              value: "{{MIC_NAME}}-mariadb"
            - name: _APP_DB_PORT
              value: "3306"
            - name: _APP_DB_SCHEMA
              value: "appwrite"
            - name: _APP_DB_USER
              value: "user"
            - name: _APP_DB_PASS 
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
            - name: _APP_USAGE_STATS
              value: enabled
            - name: _APP_OPENSSL_KEY_V1
              valueFrom:
                secretKeyRef:
                  name: {{MIC_SECRET_NAME}}
                  key: DatabasePassword
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-realtime"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-realtime"
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-realtime"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{MIC_NAME}}-realtime"
  namespace: "{{MIC_NAMESPACE}}"
spec:
  ingressClassName: nginx
  rules:
    - host: "{{MIC_DOMAIN_NAME}}"
      http:
        paths:
          - path: /v1/realtime
            pathType: Prefix
            backend:
              service:
                name: "{{MIC_NAME}}-realtime"
                port:
                  number: 80
  tls:
    - hosts:
        - "{{MIC_DOMAIN_NAME}}"
      secretName: "{{MIC_DOMAIN_TLS}}"
---
# Telegraf

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-telegraf"
  labels:
    app: "{{MIC_NAME}}-telegraf"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}-telegraf"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}-telegraf"
    spec:
      containers:
        - name: "appwrite-telegraf"
          image: appwrite/telegraf:1.4.0
          env:
            - name: MIC_EXECUTION_ID
              value: "{{MIC_EXECUTION_ID}}"
            - name: _APP_INFLUXDB_HOST
              value: "{{MIC_NAME}}-influxdb"
            - name: _APP_INFLUXDB_PORT
              value: "8086"
          ports:
            - containerPort: 8125
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}-telegraf"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}-telegraf"
spec:
  ports:
    - name: "8125"
      port: 8125
      targetPort: 8125
  type: NodePort
  selector:
    app: "{{MIC_NAME}}-telegraf"